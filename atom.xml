<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zerokei&#39;s Personal Site</title>
  <icon>http://zerokei.github.io/icon.png</icon>
  
  <link href="http://zerokei.github.io/atom.xml" rel="self"/>
  
  <link href="http://zerokei.github.io/"/>
  <updated>2022-04-10T00:15:38.130Z</updated>
  <id>http://zerokei.github.io/</id>
  
  <author>
    <name>Zerokei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Stack Migration</title>
    <link href="http://zerokei.github.io/2022/04/03/stack-migration/"/>
    <id>http://zerokei.github.io/2022/04/03/stack-migration/</id>
    <published>2022-04-03T06:54:39.075Z</published>
    <updated>2022-04-10T00:15:38.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是ROP"><a href="#什么是ROP" class="headerlink" title="什么是ROP"></a>什么是ROP</h1><p>ROP 全称 Return-Oriented Programming，允许攻击者在程序开启一些保护措施时，劫取控制权。<br>ROP 一般会利用程序现有的代码片段或链接库内的代码片段作为<code>gadget</code>，并拼凑这些gadget以达成劫取控制流的目的。</p><span id="more"></span><h1 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h1><p>顾名思义，该技术利用了libc内常见的功能函数和代码片段，如<code>system</code>,<code>/bin/sh</code>等，并可利用这些片段调用system(“&#x2F;bin&#x2F;sh”)以劫取控制流。<br>当然，libc并不是能够轻易利用的，如何知道目标程序使用的libc库的版本，如何获取libc库在程序中的加载位置，都需要通过额外的hack方式获取。</p><h1 id="stack-migration"><a href="#stack-migration" class="headerlink" title="stack migration"></a>stack migration</h1><p>当然，本文想要谈论的仅仅是如何在有限的溢出条件下构建rop链，这也是返回溢出攻击下的关键一步。<br>举个例子，如果有一个函数，它可以溢出的空间仅仅只有0x10 byte(64位系统)，那么只有栈空间和返回地址可以控制。<br>但这并不意味着，我们不能对这个程序进行有效的ROP攻击，以x86-64为例，</p><ol><li>首先我们需要找到可以写入的地址空间（如bss段）</li><li>将rbp转移到此地址空间中</li><li>不断移动rbp，并不断将返回地址指向读取函数</li><li>如此往复，将rop链拼接在一起。</li></ol><h1 id="具体例子"><a href="#具体例子" class="headerlink" title="具体例子"></a>具体例子</h1><p>假设有函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> A[<span class="number">0x10</span>];</span><br><span class="line">    read(A, <span class="number">0x20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为只有0x10大小的可利用溢出空间，故必须需要多次read。<br>但是在重复读取的时候，发现rsp和rbp会不可避免地对齐，进而影响read的溢出操作。<br><img src="/../images/rop/stk_s.png"><br>有一个解决方案就是将rsp与rbp分开。分开的方式有蛮多种。其中一种就是另开一个buf区域，在原buf区域读取后，将<br>rbp迁移到第二个buf区域，这样就可以人为地将rbp和rsp分开，以避免read溢出被干扰的情形。<br>具体实现方案如下：</p><ol><li>通过第一次read，将rbp迁移到可控的内存区域buf1。<br><img src="/../images/rop/stk1.png"></li><li>通过第二次read，将rbp迁移到buf2(第二个可控内存区域)，同时在buf1处首次载入两个字的有效payload。<br><img src="/../images/rop/stk2.png"></li><li>通过第三次read，将rsp”勾引”到buf2，为下次在buf1正常载入payload做准备。<br><img src="/../images/rop/stk3.png"></li><li>通过第四次read，在原载入的两个字有效的payload后，再接上两个字。<br><img src="/../images/rop/stk4.png"></li><li>如此循环往复，就可以不断地在指定空间中填入我们想要的数据。<br><img src="/../images/rop/stk5.png"></li><li>至于如何执行载入的payload，需要对载入的数据进行一些小小的修改。如最后返回地址设成leave所在地址，以便将rsp设为rbp指向的位置，但同时会有<code>pop rbp</code>，为保证后续操作的稳定，在payload的开头应放置合理的数据(如buf1的地址)，以保证rbp的数值一直合法。<br><img src="/../images/rop/stk6.png"><br><img src="/../images/rop/stk7.png"></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;什么是ROP&quot;&gt;&lt;a href=&quot;#什么是ROP&quot; class=&quot;headerlink&quot; title=&quot;什么是ROP&quot;&gt;&lt;/a&gt;什么是ROP&lt;/h1&gt;&lt;p&gt;ROP 全称 Return-Oriented Programming，允许攻击者在程序开启一些保护措施时，劫取控制权。&lt;br&gt;ROP 一般会利用程序现有的代码片段或链接库内的代码片段作为&lt;code&gt;gadget&lt;/code&gt;，并拼凑这些gadget以达成劫取控制流的目的。&lt;/p&gt;</summary>
    
    
    
    <category term="security" scheme="http://zerokei.github.io/categories/security/"/>
    
    
    <category term="pwn" scheme="http://zerokei.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Merging Write Buffers</title>
    <link href="http://zerokei.github.io/2022/03/23/merging-write-buffers/"/>
    <id>http://zerokei.github.io/2022/03/23/merging-write-buffers/</id>
    <published>2022-03-23T07:46:31.170Z</published>
    <updated>2022-04-10T00:17:53.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Write-Buffers"><a href="#什么是Write-Buffers" class="headerlink" title="什么是Write Buffers"></a>什么是Write Buffers</h1><p>假设我们有数据需要写入，由运算单元传递至L1 Cache，但是L1 Cache里面没有储存该内容（即miss了），那么就要去L2 Cache中找。<br>若L2 Cache中仍然没有，则需要访问更后面的存储结构。</p><span id="more"></span><p><img src="https://s2.loli.net/2022/03/23/DqouTH7zBi32ch5.png"><br>这样会造成十分漫长的等待。<br><img src="https://s2.loli.net/2022/03/23/yQs6bR7cCF3V5oZ.png"><br>但是如果在L1 Cache和L2 Cache中增设一个write buffer，则当L1 Cache将写入数据写进write buffer后，即可不停转地进行下面的任务。<br><img src="https://s2.loli.net/2022/03/23/5RqV4nCiwDdLIHk.png"> </p><h1 id="Write-Buffers的缺陷"><a href="#Write-Buffers的缺陷" class="headerlink" title="Write Buffers的缺陷"></a>Write Buffers的缺陷</h1><p>其实我们可以很快地发现，Write Buffers本身并不能很好地解决写入等待的问题，因为若有频繁的写入操作，Write Buffers可能会被很快地填满。<br><img src="https://s2.loli.net/2022/03/23/UpN9P16jSLtGOsT.png"><br>我们或许可以尝试增大它的容量。<br><img src="https://s2.loli.net/2022/03/23/WAXyg7q9D6c8dNp.png"><br>但是可能在面对大量的写入操作时，仍然不能起到一个很好的效果。<br><img src="https://s2.loli.net/2022/03/23/oTiXQhPwUyqnxrM.png"></p><h1 id="Merging-Write-Buffers"><a href="#Merging-Write-Buffers" class="headerlink" title="Merging Write Buffers"></a>Merging Write Buffers</h1><p>这时，我们或许可以尝试合并Write Buffers。即增大它的吞吐量（严格的来说是单次传递到下一层的数据量）<br><img src="https://s2.loli.net/2022/03/23/8MqHaKLegoF1G9j.png"><br>清空上面的第一行，只需要一次就行（因为他们被合并成了一条数据）<br>而清空第三行可能就需要四次。<br>特别是当存在循环写入的时候，我们的合并写入可以起到关键性的优化。（在后面的例子中会讲到）</p><h1 id="Merging-Write-Buffers的限制"><a href="#Merging-Write-Buffers的限制" class="headerlink" title="Merging Write Buffers的限制"></a>Merging Write Buffers的限制</h1><ol><li>地址必须连续，只有当数据的存储地址连续时，我们传递数据时才可以进行合并。<br> <img src="https://s2.loli.net/2022/03/23/dC6Xmo8RWH4hgPj.png"></li><li>Write buffers的“行数”决定了它能存放的不同地址空间的数据的大小。当然也不能太大，不然也会造成器件的冗余以致影响性能。<br> <img src="https://s2.loli.net/2022/03/23/tudFAMrXEpZgcNw.png"></li></ol><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>fun1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint64_t</span> i = size;</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="keyword">while</span>(i--)&#123;</span><br><span class="line"> id = (<span class="type">int</span>)i &amp; mask;</span><br><span class="line"> a[id] = i;b[id] = i;</span><br><span class="line"> c[id] = i;d[id] = i;</span><br><span class="line"> e[id] = i;f[id] = i;</span><br><span class="line"> g[id] = i;h[id] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fun2</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint64_t</span> i = size;</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="keyword">while</span>(i--)&#123;</span><br><span class="line"> id = (<span class="type">int</span>)i &amp; mask;</span><br><span class="line"> a[id] = i;b[id] = i;</span><br><span class="line"> c[id] = i;d[id] = i;</span><br><span class="line">&#125;</span><br><span class="line">i = size;</span><br><span class="line"><span class="keyword">while</span>(i--)&#123;</span><br><span class="line"> id = (<span class="type">int</span>)i &amp; mask;</span><br><span class="line"> e[id] = i;f[id] = i;</span><br><span class="line"> g[id] = i;h[id] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的是部分C代码，定义的两个函数，进行了不同量的数据填写操作，它们看起来效果一样，甚至fun2函数看起来还要慢一些，但是得益于Merging Write Buffers，fun2函数的表现比fun1优越的多。</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>开启O1的编译选项以保证生成的执行代码逻辑符合预期。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -O1 test.cpp</span><br></pre></td></tr></table></figure><p>进行汇编的翻译，并检验语句。发现访问的几个数组的首地址均通过寄存器保存，且像id,i这样的变量都是存储在寄存器中的，这样可以尽可能地减少访问i,id造成的时间开销。<br><img src="https://s2.loli.net/2022/03/23/gX6xWRaFVwsqLnI.png"></p><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><p>保证只有一个核(core)在运行（那就只会涉及单个cache，便于模拟分析）<br><img src="https://s2.loli.net/2022/03/23/CbLE56fNrtB3WgF.png"></p><h2 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h2><p>现在我们在结果出来前，可以先模拟一下可能的情况。<br>对于fun1函数，在同个循环里会以此写入a[id],b[id],…,h[id]。<br>先写入a[id],b[id],c[id],d[id]，发现每一行都有已经被占据。<br><img src="https://s2.loli.net/2022/03/23/XCVxvbY8u4rtwl5.png"><br>接下来写入e[id]时，因为无法进行合并操作，需要等待a[id]写出它才能写入<br><img src="https://s2.loli.net/2022/03/23/7QPVfKxqMI1wF2U.png"><br><img src="https://s2.loli.net/2022/03/23/EuQ3inqwABKaH5F.png"><br>同理f[id]写入时。<br><img src="https://s2.loli.net/2022/03/23/Shr5zGov8UpDMeJ.png"><br><img src="https://s2.loli.net/2022/03/23/lyM4Q6pWTCO8Ajb.png"><br>而像fun2函数，就可以十分有效地利用merging write buffers的作用。<br><img src="https://s2.loli.net/2022/03/23/XCVxvbY8u4rtwl5.png"><br>同样，在写入一组a, b, c, d后，我们需要写入下一组a, b, c, d。由于地址连续，我们可以把它们以此拼接在后面。<br><img src="https://s2.loli.net/2022/03/23/qRkQMn9cibAwJTo.png"><br>依此类推<br><img src="https://s2.loli.net/2022/03/23/HtiTd69JrEZgVme.png"><br><img src="https://s2.loli.net/2022/03/23/zHqWIGnZ8aLkXto.png"><br>当他们均被填满而需要继续写入a, b, c, d时，我们只需把合并后的数据依次写出就好了，理论上写出的次数时原来的1&#x2F;4!<br><img src="https://s2.loli.net/2022/03/23/cIoskliCmMpbFHq.png"></p><h2 id="模拟结果"><a href="#模拟结果" class="headerlink" title="模拟结果"></a>模拟结果</h2><p>下面是模拟结果：<br>8表示在循环里对8个数组写入数据，44表示分两次每次在循环中对4个数组写入数据，2222和62也同理。<br>发现44划分时，所花的时间最少。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(8)9.34549                                                      </span><br><span class="line">(44)3.75535                                              </span><br><span class="line">(2222)4.18219                      </span><br><span class="line">(62)6.1677 </span><br></pre></td></tr></table></figure><p>有人可能会觉得这个条件太严苛了，但实际上我们确实很多时候进行的就是循环遍历数据的操作，而在此时若能把循环遍历的数据进行合并写入，就能达到很好的优化效果。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> size 2e9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mask 1023</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">uint64_t</span> *a = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *b = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *c = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *d = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *e = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *f = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *g = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *h = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> i = size;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">while</span>(i--)&#123;</span><br><span class="line">        id = (<span class="type">int</span>)i &amp; mask;</span><br><span class="line">        a[id] = i;</span><br><span class="line">        b[id] = i;</span><br><span class="line">        c[id] = i;</span><br><span class="line">        d[id] = i;</span><br><span class="line">        e[id] = i;</span><br><span class="line">        f[id] = i;</span><br><span class="line">        g[id] = i;</span><br><span class="line">        h[id] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> [] a;</span><br><span class="line">    <span class="keyword">delete</span> [] b;</span><br><span class="line">    <span class="keyword">delete</span> [] c;</span><br><span class="line">    <span class="keyword">delete</span> [] d;</span><br><span class="line">    <span class="keyword">delete</span> [] e;</span><br><span class="line">    <span class="keyword">delete</span> [] f;</span><br><span class="line">    <span class="keyword">delete</span> [] g;</span><br><span class="line">    <span class="keyword">delete</span> [] h;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">clock</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">uint64_t</span> *a = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *b = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *c = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *d = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *e = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *f = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *g = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *h = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> i = size;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">while</span>(i--)&#123;</span><br><span class="line">        id = (<span class="type">int</span>)i &amp; mask;</span><br><span class="line">        a[id] = i;</span><br><span class="line">        b[id] = i;</span><br><span class="line">        c[id] = i;</span><br><span class="line">        d[id] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    i = size;</span><br><span class="line">    <span class="keyword">while</span>(i--)&#123;</span><br><span class="line">        id = (<span class="type">int</span>)i &amp; mask;</span><br><span class="line">        e[id] = i;</span><br><span class="line">        f[id] = i;</span><br><span class="line">        g[id] = i;</span><br><span class="line">        h[id] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> [] a;</span><br><span class="line">    <span class="keyword">delete</span> [] b;</span><br><span class="line">    <span class="keyword">delete</span> [] c;</span><br><span class="line">    <span class="keyword">delete</span> [] d;</span><br><span class="line">    <span class="keyword">delete</span> [] e;</span><br><span class="line">    <span class="keyword">delete</span> [] f;</span><br><span class="line">    <span class="keyword">delete</span> [] g;</span><br><span class="line">    <span class="keyword">delete</span> [] h;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">clock</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">uint64_t</span> *a = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *b = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *c = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *d = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *e = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *f = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *g = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *h = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> i = size;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">while</span>(i--)&#123;</span><br><span class="line">        id = (<span class="type">int</span>)i &amp; mask;</span><br><span class="line">        a[id] = i;</span><br><span class="line">        b[id] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    i = size;</span><br><span class="line">    <span class="keyword">while</span>(i--)&#123;</span><br><span class="line">        id = (<span class="type">int</span>)i &amp; mask;</span><br><span class="line">        c[id] = i;</span><br><span class="line">        d[id] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    i = size;</span><br><span class="line">    <span class="keyword">while</span>(i--)&#123;</span><br><span class="line">        id = (<span class="type">int</span>)i &amp; mask;</span><br><span class="line">        e[id] = i;</span><br><span class="line">        f[id] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    i = size;</span><br><span class="line">    <span class="keyword">while</span>(i--)&#123;</span><br><span class="line">        id = (<span class="type">int</span>)i &amp; mask;</span><br><span class="line">        g[id] = i;</span><br><span class="line">        h[id] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> [] a;</span><br><span class="line">    <span class="keyword">delete</span> [] b;</span><br><span class="line">    <span class="keyword">delete</span> [] c;</span><br><span class="line">    <span class="keyword">delete</span> [] d;</span><br><span class="line">    <span class="keyword">delete</span> [] e;</span><br><span class="line">    <span class="keyword">delete</span> [] f;</span><br><span class="line">    <span class="keyword">delete</span> [] g;</span><br><span class="line">    <span class="keyword">delete</span> [] h;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">clock</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">uint64_t</span> *a = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *b = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *c = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *d = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *e = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *f = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *g = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint64_t</span> *h = <span class="keyword">new</span> <span class="type">uint64_t</span>[mask+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> i = size;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">while</span>(i--)&#123;</span><br><span class="line">        id = (<span class="type">int</span>)i &amp; mask;</span><br><span class="line">        a[id] = i;</span><br><span class="line">        b[id] = i;</span><br><span class="line">        c[id] = i;</span><br><span class="line">        d[id] = i;</span><br><span class="line">        g[id] = i;</span><br><span class="line">        h[id] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    i = size;</span><br><span class="line">    <span class="keyword">while</span>(i--)&#123;</span><br><span class="line">        id = (<span class="type">int</span>)i &amp; mask;</span><br><span class="line">        e[id] = i;</span><br><span class="line">        f[id] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> [] a;</span><br><span class="line">    <span class="keyword">delete</span> [] b;</span><br><span class="line">    <span class="keyword">delete</span> [] c;</span><br><span class="line">    <span class="keyword">delete</span> [] d;</span><br><span class="line">    <span class="keyword">delete</span> [] e;</span><br><span class="line">    <span class="keyword">delete</span> [] f;</span><br><span class="line">    <span class="keyword">delete</span> [] g;</span><br><span class="line">    <span class="keyword">delete</span> [] h;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">clock</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> start = <span class="built_in">clock</span>();</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;(8)&quot;</span>&lt;&lt;<span class="number">1.0</span>*(<span class="built_in">fun1</span>()-start)/CLOCKS_PER_SEC&lt;&lt;endl;</span><br><span class="line">    start = <span class="built_in">clock</span>();</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;(4+4)&quot;</span>&lt;&lt;<span class="number">1.0</span>*(<span class="built_in">fun2</span>()-start)/CLOCKS_PER_SEC&lt;&lt;endl;</span><br><span class="line">    start = <span class="built_in">clock</span>();</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;(2+2+2+2)&quot;</span>&lt;&lt;<span class="number">1.0</span>*(<span class="built_in">fun3</span>()-start)/CLOCKS_PER_SEC&lt;&lt;endl;</span><br><span class="line">    start = <span class="built_in">clock</span>();</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;(6+2)&quot;</span>&lt;&lt;<span class="number">1.0</span>*(<span class="built_in">fun4</span>()-start)/CLOCKS_PER_SEC&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="http://ifeve.com/writecombining/">合并写(write combining)-并发编程网</a></p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>后来发现上面的测试是不严谨的，首先仅仅1024大小的uint_64位数据会被完全载入L1 Cache，进而不会产生miss，所以应该把数组的大小修改为8196及以上（具体运算过程省略），这样之后发现4,4的分割虽仍有优势，但不再这么明显，这也足以说明merging-write-buffers本身是一个<strong>小优化</strong>。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;什么是Write-Buffers&quot;&gt;&lt;a href=&quot;#什么是Write-Buffers&quot; class=&quot;headerlink&quot; title=&quot;什么是Write Buffers&quot;&gt;&lt;/a&gt;什么是Write Buffers&lt;/h1&gt;&lt;p&gt;假设我们有数据需要写入，由运算单元传递至L1 Cache，但是L1 Cache里面没有储存该内容（即miss了），那么就要去L2 Cache中找。&lt;br&gt;若L2 Cache中仍然没有，则需要访问更后面的存储结构。&lt;/p&gt;</summary>
    
    
    
    <category term="architecture" scheme="http://zerokei.github.io/categories/architecture/"/>
    
    
    <category term="cache" scheme="http://zerokei.github.io/tags/cache/"/>
    
  </entry>
  
</feed>
